function IntrinsicDir(window)% Shuhan Huang @ Fishell lab Updated on 03/11/2022% shuhan_huang@g.harvard.edu% This function presents blackcreen for 1s, moving stimuli 1s and another% blackscreen for 1s (Each trial). Intertrial is 90s black screen waiting.    %% Global parameters    global Distance screenNumber PATHSTR Winwidth Winheight FR Dispwidth Dispheight;     global Para_Monitor Para_front Para_subpanel Para_Trigger Para_Noise Para_RFGrat Para_MvSinGrat Para_MvSinGratSize Para_MvSinGratContrast Para_ManualBar ...           Para_MoveSquGrat Para_MoveEdge Para_MoveSquBar Para_Spontaneous Para_RFCourse Para_Intrinsic;     global RF_X RF_Y;   % the center of RF    global FrontRect;     try       %% Contrast setup    % update contrast    [contrastpix lums]=gammacorrection(Para_Monitor.MaximalContrast);    inc=lums(2)-lums(1); %amplitude of sinusoidal function in luminance    %% Prepare stimulations    % Decide how many orientations to present     % Input stimulations from file    sequence=load([PATHSTR '\Seq_stimuli\Intrinsic_4dir.txt']);    angle = mod(sequence(:,1), 360); % make sure angle is [0,360)     %% Draw the trigger for the beginning of the recording    % build triggering square    trigger_squ(1) = Screen('MakeTexture', window,zeros([Para_Trigger.Size Para_Trigger.Size])+Para_Trigger.Bright); % trigger-bright    trigger_squ(2) = Screen('MakeTexture', window,zeros([Para_Trigger.Size Para_Trigger.Size]));    %% Generate Frames for each trial    % Decide if stimulation is full screen or not    % if full screen    [x,y]=meshgrid(1:Winwidth,1:Winheight);    rectwin=[0 0 Winwidth Winheight];    % get frame numbers for moving    moving_frames=round(Para_Intrinsic.TrialMovingTime/1000*FR/4); %  frames for each orientation    % Prepare gray screen and prepare to draw the trigger    angle_range=(0:45:135)-180;    SpatFreqPix=1/(tand(1/Para_Intrinsic.SpatFreqDeg/2)*Distance*2*Winwidth/Dispwidth);      f=SpatFreqPix*2*pi; 	    a=cosd(angle_range)*f;    b=sind(angle_range)*f;    frames=round(FR/Para_Intrinsic.TempFreq);    phase=(1:frames)/frames*2*pi;  % grating    movieFrameIndices0=mod(0:(moving_frames-1),frames) + 1;    movieFrameIndices1=frames-mod(0:(moving_frames-1),frames);    orindex=mod(angle, 180)/45+1;   % orientation index is the index for Para_MvSinGrat.tex(orindex, frameindex)    dirindex=fix(angle/180);        % 0 for 0<=angle<180, frameindex=1:frames; 1 for angle>=180, frameindex=frames:1          %% Give priority before 'Flip', loading window    HideCursor;	priorityLevel=MaxPriority(window);	Priority(priorityLevel);    Screen('FillRect', window, Para_front.minpixel); %gray background 	Screen('TextSize',window,round(Para_front.SizeofText));    Screen('DrawText',window,'loading......',0,0,Para_front.maxpixel*0.8);    Screen('Flip', window);    %% calculate each angle stimulation    for j=1:length(angle_range)        for k = 1:frames            m=sin(a(j)*x+b(j)*y+phase(k));            texdata_full = exp(log((lums(2)+inc*m-Para_Monitor.BaseFactor)/Para_Monitor.AmpFactor)/Para_Monitor.GammaFactor); % transform luminance to pixel value            Para_Intrinsic.tex(j,k)=Screen('MakeTexture', window, texdata_full);                 end    end    %% Give priority before 'Flip'    HideCursor;    priorityLevel=MaxPriority(window);    Priority(priorityLevel);    %% Before recording: Time before trigger    % Start presentation, but waitwith black screen    tic;    Screen('FillRect',window, Para_front.minpixel); %black background     Screen('DrawTexture', window, trigger_squ(2),[],Para_Trigger.Location); % BRIGHT TRIGGER    Screen('Flip', window);    while toc<Para_Intrinsic.initiateISI/1000        [mX, mY, buttons] = GetMouse;        if buttons(2)           Priority(0);            ShowCursor;           return;        end            end            %% present TRIGGER to start recording (RECORDING DATA STARTS HERE]    for repeat = 1:Para_Intrinsic.repeats        % (0) baseline waitwindow         tic;            Screen('FillRect', window,Para_front.minpixel);            Screen('DrawTexture', window, trigger_squ(2),[],Para_Trigger.Location); % BRIGHT TRIGGER            Screen('Flip', window);            while toc<(Para_Intrinsic.ISI)/1000                [mX, mY, buttons] = GetMouse;                if buttons(2)                   Priority(0);                    ShowCursor;                   return;                end                    end                     % (1) trigger - recording starts        tic;        Screen('FillRect', window, Para_front.minpixel); %gray background         Screen('DrawTexture', window, trigger_squ(1),[],Para_Trigger.Location); % BRIGHT TRIGGER        Screen('Flip', window);        while toc<Para_Trigger.StimTime/1000            [mX, mY, buttons] = GetMouse;            if buttons(2)               Priority(0);                ShowCursor;               return;            end                end          % (2) Baseline activity for each trial         tic;        Screen('FillRect', window, Para_front.minpixel);         Screen('DrawTexture', window, trigger_squ(2),[],Para_Trigger.Location); % BRIGHT TRIGGER        Screen('Flip', window);        while toc<Para_Intrinsic.TrialBaseTime/1000            [mX, mY, buttons] = GetMouse;            if buttons(2)               Priority(0);                ShowCursor;               return;            end                end                 % (3) Moving activity for each trial        for j=1:length(angle) % each orientation trial            if dirindex(j)==0                movieFrameIndices=movieFrameIndices0;            else                movieFrameIndices=movieFrameIndices1;            end            % (2) Moving Stimuli            tic;            for moving_frame_i = 1:moving_frames                Screen('DrawTexture', window, Para_Intrinsic.tex(orindex(j),movieFrameIndices(moving_frame_i)), [], rectwin);                Screen('DrawTexture', window, trigger_squ(2),[],Para_Trigger.Location); % BRIGHT TRIGGER                Screen('Flip', window);                [mX, mY, buttons] = GetMouse;                if buttons(2)                   Priority(0);                    ShowCursor;                   return;                end             end         end            % (3) Recovery of baseline for each trial with static stimuli        tic;        Screen('FillRect', window,Para_front.minpixel);        Screen('DrawTexture', window, trigger_squ(2),[],Para_Trigger.Location); % BRIGHT TRIGGER        Screen('Flip', window);        while toc<Para_Intrinsic.TrialRecoverTime/1000            [mX, mY, buttons] = GetMouse;            if buttons(2)               Priority(0);                ShowCursor;               return;            end                end      end    Priority(0);     ShowCursor; catch    %this "catch" section executes in case of an error in the "try" section    %above.  Importantly, it closes the onscreen window if its open.    Screen('CloseAll');    Priority(0);    psychrethrow(psychlasterror);end 